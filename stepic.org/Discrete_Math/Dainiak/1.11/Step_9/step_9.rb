#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
################################################################################
# $Date$
# $Id$
# $Version: 0.1$
# $Revision: 9$
# $Author: Victor |Stalker| Skurikhin <stalker@quake.ru>$
################################################################################
# Сколько десятибуквенных слов (произвольных последовательностей букв) можно 
# составить из букв русского алфавита (коих 33 штуки), таких, чтобы в этих
# словах не встречалось слово «мат». Для того, чтобы получить ответ, можно
# воспользоваться одним из двух путей: составить рекуррентное соотношение,
# либо придумать что-то похожее на формулу включений-исключений.
# Не бойтесь, если ответ получится в виде не самой компактной формулы.
# Главное, чтобы ответ был правильным.
# 

class Integer
  def fact
    (1..self).reduce(:*) || 1
  end
end

# k-размещений с повторениями: Ā(k, n) = n**k
# <=> n-размещений из k Ā(n, k) = Āⁿₖ = kⁿ
# k-размещений с без повторений: A(k, n) = n!/(n-k)!
def A(k, n)
  return nil if n < 0 or k < 0 or n < k
  n.fact/(n-k).fact
end

# k-сочетаний без повторений: C(k, n) = n!/((n-k)!∙k!)
def C(k, n)
  return nil if n < 0 or k < 0 or n < k
  n.fact/((n-k).fact*k.fact)
end

def CC(k ,n)
  C(k, n+k-1)
end

# полиномиальный коэффициет:
def P(n, *k)
  return nil if n < 0
  pp = 1
  k.each {|e| pp = pp*e.fact }
  n.fact/pp
end

# включения-исключения
# |все слова| - |мат| + |мат∩мат| - |мат∩мат∩мат|
# |все слова| = 33^10
# |мат|       = 8*33^7 (8 - возможных позиций, 7-свободных клеток)
# |мат∩мат|   = (5+5+5)*33^4 (5 размещений /^мат.*мат/ + 5 размещений + 5)
# |мат∩мат∩мат| = 4*33 (4 вохможных размещения * 1 пустая клетка)
p 33**10-8*33**7+15*33**4-4*33

__END__
################################################################################
# vim: syntax=ruby:fileencoding=utf-8:fileformat=unix:tw=78:ts=2:sw=2:sts=2:et
# EOF
